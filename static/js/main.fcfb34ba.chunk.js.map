{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Initial","sortField","setSortField","reverseField","setReverseField","visibleGoods","goods","preparedGoods","sort","a","b","Letters","localeCompare","Length","length","reverse","getPreparedGoods","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,4EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,kBAAAA,E,gBAAAA,E,YAAAA,M,KAiCE,IAAME,EAAM,WACjB,MAAkCC,mBAASH,EAASI,SAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCH,oBAAS,GAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KACMC,EA9BR,SACEC,EACAL,GAEC,IADDE,EACA,wDACMI,EAAa,YAAOD,GAmB1B,OAjBIL,GACFM,EAAcC,MAAK,SAACC,EAAGC,GACrB,OAAQT,GACN,KAAKL,EAASe,QACZ,OAAOF,EAAEG,cAAcF,GACzB,KAAKd,EAASiB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OACtB,QACE,OAAO,MAKXX,GACFI,EAAcQ,UAGTR,EAMcS,CACnBnB,EAAiBI,EAAWE,GAG9B,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMhB,EAAaN,EAASe,UACrCQ,KAAK,SACLF,UAAWG,IAAG,iBAAkB,CAC9B,WAAYnB,IAAcL,EAASe,UAJvC,iCAUA,wBACEO,QAAS,kBAAMhB,EAAaN,EAASiB,SACrCM,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,WAAYnB,IAAcL,EAASiB,SAJvC,4BAUA,wBACEK,QAAS,kBAAMd,GAAiBD,IAChCgB,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,YAAajB,IAJjB,sBAUEF,GAAaE,IACb,wBACEe,QAAS,WACPhB,EAAaN,EAASI,SACtBI,GAAgB,IAElBe,KAAK,SACLF,UAAU,4BANZ,sBAaJ,6BACGZ,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCzGlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.fcfb34ba.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport cn from 'classnames';\n\nimport './App.scss';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Letters = 'letters',\n  Length = 'length',\n  Initial = '',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: SortType,\n  reverseField = false,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((a, b) => {\n      switch (sortField) {\n        case SortType.Letters:\n          return a.localeCompare(b);\n        case SortType.Length:\n          return a.length - b.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseField) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState(SortType.Initial);\n  const [reverseField, setReverseField] = useState(false);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer, sortField, reverseField,\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortType.Letters)}\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField !== SortType.Letters,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortType.Length)}\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField !== SortType.Length,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setReverseField(!reverseField)}\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !reverseField,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverseField) && (\n          <button\n            onClick={() => {\n              setSortField(SortType.Initial);\n              setReverseField(false);\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}